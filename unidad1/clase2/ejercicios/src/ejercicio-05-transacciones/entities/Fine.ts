import {
  Entity,
  PrimaryGeneratedColumn,
  Column,
  CreateDateColumn,
  UpdateDateColumn,
  ManyToOne,
  OneToMany,
  JoinColumn,
} from "typeorm";
import { Member } from "./Member";
import { Loan } from "./Loan";
import { Payment } from "./Payment";

export enum FineType {
  OVERDUE = "overdue",
  LOST_BOOK = "lost_book",
  DAMAGED_BOOK = "damaged_book",
  PROCESSING = "processing",
  REPLACEMENT = "replacement",
  ADMINISTRATIVE = "administrative",
  LATE_RETURN = "late_return",
  RENEWAL_OVERDUE = "renewal_overdue",
}

export enum FineStatus {
  PENDING = "pending",
  PAID = "paid",
  PARTIALLY_PAID = "partially_paid",
  WAIVED = "waived",
  DISPUTED = "disputed",
  CANCELLED = "cancelled",
  EXPIRED = "expired",
}

export enum FineCategory {
  STANDARD = "standard",
  EXCESSIVE = "excessive",
  REPLACEMENT = "replacement",
  SPECIAL = "special",
}

@Entity()
export class Fine {
  @PrimaryGeneratedColumn()
  id: number;

  @Column({ length: 50, unique: true, nullable: false })
  fineNumber: string;

  @Column({
    type: "varchar",
    length: 20,
    nullable: false,
  })
  type: FineType;

  @Column({
    type: "varchar",
    length: 20,
    default: FineStatus.PENDING,
  })
  status: FineStatus;

  @Column({
    type: "varchar",
    length: 20,
    default: FineCategory.STANDARD,
  })
  category: FineCategory;

  @Column({ type: "decimal", precision: 10, scale: 2, nullable: false })
  amount: number;

  @Column({ type: "decimal", precision: 10, scale: 2, default: 0.0 })
  amountPaid: number;

  @Column({ type: "decimal", precision: 10, scale: 2, default: 0.0 })
  amountDue: number;

  @Column({ type: "decimal", precision: 10, scale: 2, default: 0.0 })
  amountWaived: number;

  @Column({ type: "decimal", precision: 10, scale: 2, default: 0.0 })
  originalAmount: number;

  @Column({ type: "date", nullable: false })
  issueDate: Date;

  @Column({ type: "date", nullable: true })
  dueDate?: Date;

  @Column({ type: "date", nullable: true })
  paidDate?: Date;

  @Column({ type: "date", nullable: true })
  waivedDate?: Date;

  @Column({ type: "text", nullable: false })
  description: string;

  @Column({ type: "text", nullable: true })
  reason?: string;

  @Column({ type: "text", nullable: true })
  notes?: string;

  @Column({ type: "varchar", length: 100, nullable: true })
  issuedBy?: string;

  @Column({ type: "varchar", length: 100, nullable: true })
  processedBy?: string;

  @Column({ type: "varchar", length: 100, nullable: true })
  waivedBy?: string;

  @Column({ type: "text", nullable: true })
  waiverReason?: string;

  @Column({ type: "int", unsigned: true, default: 0 })
  daysOverdue: number;

  @Column({ type: "decimal", precision: 5, scale: 2, default: 0.0 })
  dailyRate: number;

  @Column({ type: "boolean", default: true })
  isActive: boolean;

  @Column({ type: "boolean", default: false })
  isRecurring: boolean;

  @Column({ type: "boolean", default: false })
  isDisputed: boolean;

  @Column({ type: "text", nullable: true })
  disputeReason?: string;

  @Column({ type: "datetime", nullable: true })
  disputeDate?: Date;

  @Column({ type: "boolean", default: false })
  isAutoGenerated: boolean;

  @Column({ type: "boolean", default: false })
  canBeWaived: boolean;

  @Column({ type: "decimal", precision: 10, scale: 2, default: 0.0 })
  minimumPayment: number;

  @Column({ type: "json", nullable: true })
  paymentHistory?: {
    date: Date;
    amount: number;
    method: string;
    reference?: string;
    processedBy?: string;
  }[];

  @Column({ type: "json", nullable: true })
  adjustmentHistory?: {
    date: Date;
    oldAmount: number;
    newAmount: number;
    reason: string;
    processedBy?: string;
  }[];

  @Column({ type: "datetime", nullable: true })
  lastNotificationDate?: Date;

  @Column({ type: "int", unsigned: true, default: 0 })
  notificationCount: number;

  @Column({ type: "varchar", length: 255, nullable: true })
  externalReference?: string;

  @Column({ type: "boolean", default: false })
  requiresApproval: boolean;

  @Column({ type: "boolean", default: false })
  isApproved: boolean;

  @Column({ type: "varchar", length: 100, nullable: true })
  approvedBy?: string;

  @Column({ type: "datetime", nullable: true })
  approvedDate?: Date;

  @Column({ type: "decimal", precision: 3, scale: 2, default: 1.0 })
  interestRate: number; // Tasa de interés por mora

  @Column({ type: "decimal", precision: 10, scale: 2, default: 0.0 })
  interestAccrued: number;

  @Column({ type: "datetime", nullable: true })
  lastInterestCalculation?: Date;

  // ===== RELACIONES =====

  @ManyToOne(() => Member, (member) => member.fines, {
    nullable: false,
    eager: true,
  })
  @JoinColumn({ name: "memberId" })
  member: Member;

  @Column({ type: "int", unsigned: true, nullable: false })
  memberId: number;

  @ManyToOne(() => Loan, (loan) => loan.fines, {
    nullable: true,
    eager: true,
  })
  @JoinColumn({ name: "loanId" })
  loan?: Loan;

  @Column({ type: "int", unsigned: true, nullable: true })
  loanId?: number;

  @OneToMany(() => Payment, (payment) => payment.fine, {
    cascade: true,
  })
  payments: Payment[];

  @CreateDateColumn()
  createdAt: Date;

  @UpdateDateColumn()
  updatedAt: Date;

  constructor(
    member?: Member,
    type?: FineType,
    amount?: number,
    description?: string,
    loan?: Loan
  ) {
    this.member = member!;
    this.type = type || FineType.OVERDUE;
    this.amount = amount || 0;
    this.originalAmount = amount || 0;
    this.amountDue = amount || 0;
    this.description = description || "";
    this.loan = loan;
    this.fineNumber = this.generateFineNumber();
    this.issueDate = new Date();
    this.dueDate = this.calculateDueDate();
  }

  // ===== MÉTODOS UTILITARIOS =====

  private generateFineNumber(): string {
    const timestamp = Date.now().toString(36);
    const random = Math.random().toString(36).substr(2, 4);
    return `FN-${timestamp}-${random}`.toUpperCase();
  }

  private calculateDueDate(): Date {
    const dueDate = new Date();
    dueDate.setDate(dueDate.getDate() + 30); // 30 días para pagar
    return dueDate;
  }

  getTypeDisplayName(): string {
    const typeNames: Record<FineType, string> = {
      [FineType.OVERDUE]: "Devolución Tardía",
      [FineType.LOST_BOOK]: "Libro Perdido",
      [FineType.DAMAGED_BOOK]: "Libro Dañado",
      [FineType.PROCESSING]: "Procesamiento",
      [FineType.REPLACEMENT]: "Reemplazo",
      [FineType.ADMINISTRATIVE]: "Administrativa",
      [FineType.LATE_RETURN]: "Devolución Tardía",
      [FineType.RENEWAL_OVERDUE]: "Renovación Tardía",
    };
    return typeNames[this.type];
  }

  getStatusDisplayName(): string {
    const statusNames: Record<FineStatus, string> = {
      [FineStatus.PENDING]: "Pendiente",
      [FineStatus.PAID]: "Pagada",
      [FineStatus.PARTIALLY_PAID]: "Parcialmente Pagada",
      [FineStatus.WAIVED]: "Condonada",
      [FineStatus.DISPUTED]: "En Disputa",
      [FineStatus.CANCELLED]: "Cancelada",
      [FineStatus.EXPIRED]: "Expirada",
    };
    return statusNames[this.status];
  }

  getCategoryDisplayName(): string {
    const categoryNames: Record<FineCategory, string> = {
      [FineCategory.STANDARD]: "Estándar",
      [FineCategory.EXCESSIVE]: "Excesiva",
      [FineCategory.REPLACEMENT]: "Reemplazo",
      [FineCategory.SPECIAL]: "Especial",
    };
    return categoryNames[this.category];
  }

  isPaid(): boolean {
    return this.status === FineStatus.PAID;
  }

  isPartiallyPaid(): boolean {
    return this.status === FineStatus.PARTIALLY_PAID;
  }

  isOutstanding(): boolean {
    return (
      this.status === FineStatus.PENDING ||
      this.status === FineStatus.PARTIALLY_PAID
    );
  }

  isOverdue(): boolean {
    return this.dueDate ? new Date() > this.dueDate : false;
  }

  getDaysOverdueForPayment(): number {
    if (!this.dueDate || !this.isOverdue()) return 0;

    const today = new Date();
    const diffTime = today.getTime() - this.dueDate.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  getDaysUntilDue(): number {
    if (!this.dueDate) return 0;

    const today = new Date();
    const diffTime = this.dueDate.getTime() - today.getTime();
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  }

  getRemainingBalance(): number {
    return Math.max(0, this.amount - this.amountPaid - this.amountWaived);
  }

  getPaymentProgress(): number {
    if (this.amount === 0) return 100;
    return (this.amountPaid / this.amount) * 100;
  }

  canMakePayment(): boolean {
    return this.isOutstanding() && !this.isDisputed && this.isActive;
  }

  canBeWaivedCompletely(): boolean {
    return this.canBeWaived && this.isOutstanding() && !this.isDisputed;
  }

  canBeDisputed(): boolean {
    return this.isOutstanding() && !this.isDisputed;
  }

  makePayment(
    amount: number,
    method: string,
    reference?: string,
    processedBy?: string
  ): boolean {
    if (!this.canMakePayment() || amount <= 0) return false;

    const maxPayment = this.getRemainingBalance();
    const paymentAmount = Math.min(amount, maxPayment);

    this.amountPaid += paymentAmount;
    this.amountDue = this.getRemainingBalance();

    // Actualizar estado
    if (this.amountDue === 0) {
      this.status = FineStatus.PAID;
      this.paidDate = new Date();
    } else {
      this.status = FineStatus.PARTIALLY_PAID;
    }

    // Registrar en historial
    if (!this.paymentHistory) this.paymentHistory = [];
    this.paymentHistory.push({
      date: new Date(),
      amount: paymentAmount,
      method,
      reference,
      processedBy,
    });

    // Actualizar estadísticas del miembro
    this.member.payFine(paymentAmount);

    return true;
  }

  waive(amount: number, reason: string, waivedBy?: string): boolean {
    if (!this.canBeWaivedCompletely() || amount <= 0) return false;

    const maxWaiver = this.getRemainingBalance();
    const waiverAmount = Math.min(amount, maxWaiver);

    this.amountWaived += waiverAmount;
    this.amountDue = this.getRemainingBalance();
    this.waiverReason = reason;
    this.waivedBy = waivedBy;

    if (this.amountDue === 0) {
      this.status = FineStatus.WAIVED;
      this.waivedDate = new Date();
    }

    return true;
  }

  waiverCompletely(reason: string, waivedBy?: string): boolean {
    return this.waive(this.getRemainingBalance(), reason, waivedBy);
  }

  dispute(reason: string): boolean {
    if (!this.canBeDisputed()) return false;

    this.isDisputed = true;
    this.disputeReason = reason;
    this.disputeDate = new Date();
    this.status = FineStatus.DISPUTED;

    return true;
  }

  resolveDispute(
    approved: boolean,
    reason?: string,
    processedBy?: string
  ): boolean {
    if (!this.isDisputed) return false;

    this.isDisputed = false;
    this.processedBy = processedBy;

    if (approved) {
      // Volver al estado anterior
      this.status =
        this.amountPaid > 0 ? FineStatus.PARTIALLY_PAID : FineStatus.PENDING;
    } else {
      // Cancelar multa
      this.status = FineStatus.CANCELLED;
      this.waiverReason = reason || "Disputa resuelta a favor del miembro";
      this.waivedDate = new Date();
    }

    return true;
  }

  adjustAmount(
    newAmount: number,
    reason: string,
    processedBy?: string
  ): boolean {
    if (newAmount < 0) return false;

    const oldAmount = this.amount;
    this.amount = newAmount;
    this.amountDue = Math.max(
      0,
      newAmount - this.amountPaid - this.amountWaived
    );

    // Registrar ajuste
    if (!this.adjustmentHistory) this.adjustmentHistory = [];
    this.adjustmentHistory.push({
      date: new Date(),
      oldAmount,
      newAmount,
      reason,
      processedBy,
    });

    // Actualizar estado si es necesario
    if (this.amountDue === 0 && this.status !== FineStatus.PAID) {
      this.status = FineStatus.PAID;
      this.paidDate = new Date();
    }

    return true;
  }

  cancel(reason?: string, processedBy?: string): boolean {
    if (this.status === FineStatus.CANCELLED) return false;

    this.status = FineStatus.CANCELLED;
    this.isActive = false;
    this.processedBy = processedBy;
    this.waiverReason = reason || "Multa cancelada";
    this.waivedDate = new Date();

    return true;
  }

  calculateInterest(): number {
    if (this.interestRate === 0 || !this.isOverdue()) return 0;

    const daysOverdue = this.getDaysOverdueForPayment();
    const dailyInterest =
      (this.getRemainingBalance() * this.interestRate) / 100 / 365;
    const totalInterest = dailyInterest * daysOverdue;

    this.interestAccrued = totalInterest;
    this.lastInterestCalculation = new Date();

    return totalInterest;
  }

  getTotalAmountDue(): number {
    return this.getRemainingBalance() + this.calculateInterest();
  }

  updateDaysOverdue(): void {
    if (this.loan) {
      this.daysOverdue = this.loan.getDaysOverdue();
    }
  }

  addNotification(): void {
    this.lastNotificationDate = new Date();
    this.notificationCount++;
  }

  approve(approvedBy?: string): boolean {
    if (!this.requiresApproval || this.isApproved) return false;

    this.isApproved = true;
    this.approvedBy = approvedBy;
    this.approvedDate = new Date();

    return true;
  }

  reject(reason?: string, processedBy?: string): boolean {
    if (!this.requiresApproval) return false;

    this.status = FineStatus.CANCELLED;
    this.isActive = false;
    this.waiverReason = reason || "Multa rechazada durante aprobación";
    this.processedBy = processedBy;

    return true;
  }

  getAgeInDays(): number {
    return Math.floor(
      (new Date().getTime() - this.issueDate.getTime()) / (1000 * 60 * 60 * 24)
    );
  }

  isEligibleForWaiver(): boolean {
    const age = this.getAgeInDays();
    const memberRating = this.member.memberRating;
    const isFirstTime = this.member.fines.length === 1;

    return (
      this.canBeWaived &&
      (age > 365 || // Más de un año
        memberRating > 4.5 || // Miembro excelente
        (isFirstTime && this.amount < 10))
    ); // Primera multa pequeña
  }

  getPaymentSummary(): {
    total: number;
    paid: number;
    waived: number;
    due: number;
    progress: number;
    interest: number;
  } {
    return {
      total: this.amount,
      paid: this.amountPaid,
      waived: this.amountWaived,
      due: this.getRemainingBalance(),
      progress: this.getPaymentProgress(),
      interest: this.calculateInterest(),
    };
  }

  getBasicInfo(): string {
    return `${
      this.fineNumber
    }: ${this.getTypeDisplayName()} - $${this.amount.toLocaleString()}`;
  }

  getDetailedInfo(): string {
    const parts = [
      `Multa: ${this.fineNumber}`,
      `Tipo: ${this.getTypeDisplayName()}`,
      `Estado: ${this.getStatusDisplayName()}`,
      `Monto: $${this.amount.toLocaleString()}`,
      `Pagado: $${this.amountPaid.toLocaleString()}`,
      `Pendiente: $${this.getRemainingBalance().toLocaleString()}`,
      `Emitida: ${this.issueDate.toLocaleDateString()}`,
    ];

    if (this.dueDate) {
      parts.push(`Vence: ${this.dueDate.toLocaleDateString()}`);
    }

    if (this.loan) {
      parts.push(`Préstamo: ${this.loan.loanNumber}`);
    }

    return parts.join(" | ");
  }

  getStatusInfo(): string {
    if (this.isPaid()) return "✅ Pagada completamente";
    if (this.isPartiallyPaid())
      return `💳 Parcialmente pagada (${this.getPaymentProgress().toFixed(
        1
      )}%)`;
    if (this.isDisputed) return "⚖️ En disputa";
    if (this.status === FineStatus.WAIVED) return "✋ Condonada";
    if (this.status === FineStatus.CANCELLED) return "❌ Cancelada";
    if (this.isOverdue())
      return `⚠️ Vencida (${this.getDaysOverdueForPayment()} días)`;
    return "⏳ Pendiente";
  }

  getPaymentOptions(): {
    minimumPayment: number;
    fullPayment: number;
    canPayPartial: boolean;
    canWaive: boolean;
    canDispute: boolean;
  } {
    return {
      minimumPayment: this.minimumPayment || 0,
      fullPayment: this.getRemainingBalance(),
      canPayPartial: this.getRemainingBalance() > this.minimumPayment,
      canWaive: this.canBeWaivedCompletely(),
      canDispute: this.canBeDisputed(),
    };
  }

  getRelatedInfo(): string {
    const parts = [];

    if (this.loan) {
      parts.push(`Préstamo: ${this.loan.loanNumber}`);
      parts.push(`Libro: ${this.loan.book.title}`);
      if (this.loan.isOverdue()) {
        parts.push(`Días vencido: ${this.loan.getDaysOverdue()}`);
      }
    }

    parts.push(`Miembro: ${this.member.getFullName()}`);
    parts.push(`Rating: ${this.member.memberRating.toFixed(1)}/5.0`);

    return parts.join(" | ");
  }

  getActionHistory(): string[] {
    const history = [];

    history.push(
      `${this.issueDate.toLocaleDateString()}: Multa emitida por $${this.amount.toLocaleString()}`
    );

    if (this.paymentHistory) {
      for (const payment of this.paymentHistory) {
        history.push(
          `${payment.date.toLocaleDateString()}: Pago de $${payment.amount.toLocaleString()} (${
            payment.method
          })`
        );
      }
    }

    if (this.adjustmentHistory) {
      for (const adjustment of this.adjustmentHistory) {
        history.push(
          `${adjustment.date.toLocaleDateString()}: Ajuste de $${adjustment.oldAmount.toLocaleString()} a $${adjustment.newAmount.toLocaleString()}`
        );
      }
    }

    if (this.waivedDate) {
      history.push(
        `${this.waivedDate.toLocaleDateString()}: Condonada $${this.amountWaived.toLocaleString()}`
      );
    }

    if (this.disputeDate) {
      history.push(
        `${this.disputeDate.toLocaleDateString()}: Puesta en disputa`
      );
    }

    return history;
  }

  requiresAttention(): boolean {
    return (
      this.isOverdue() ||
      this.isDisputed ||
      this.requiresApproval ||
      (this.category === FineCategory.EXCESSIVE && this.isOutstanding())
    );
  }

  getAttentionReasons(): string[] {
    const reasons = [];

    if (this.isOverdue()) {
      reasons.push(`Vencida hace ${this.getDaysOverdueForPayment()} días`);
    }

    if (this.isDisputed) {
      reasons.push("En disputa");
    }

    if (this.requiresApproval && !this.isApproved) {
      reasons.push("Requiere aprobación");
    }

    if (this.category === FineCategory.EXCESSIVE && this.isOutstanding()) {
      reasons.push("Multa excesiva pendiente");
    }

    return reasons;
  }
}
