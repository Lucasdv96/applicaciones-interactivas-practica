import { printEmployeeList, sampleEmployees } from "./common/sample-data";

// ============================================================================
// MAPEO DE HERENCIA - DEMOSTRACI√ìN PRINCIPAL
// ============================================================================

function showWelcome() {
  console.log("=".repeat(80));
  console.log("üèóÔ∏è  MAPEO DE HERENCIA EN BASES DE DATOS");
  console.log("=".repeat(80));
  console.log(
    "Este proyecto demuestra las 3 estrategias principales para mapear"
  );
  console.log("herencia en bases de datos relacionales:");
  console.log("");
  console.log("1. üìä TABLE PER HIERARCHY (TPH)");
  console.log("   ‚Ä¢ Una sola tabla con discriminador");
  console.log("   ‚Ä¢ Campos espec√≠ficos pueden ser NULL");
  console.log("   ‚Ä¢ Consultas polim√≥rficas simples");
  console.log("");
  console.log("2. üè¢ TABLE PER CLASS (TPC)");
  console.log("   ‚Ä¢ Tabla base + tablas espec√≠ficas con FK");
  console.log("   ‚Ä¢ Sin campos NULL innecesarios");
  console.log("   ‚Ä¢ Requiere JOINs para datos completos");
  console.log("");
  console.log("3. üóÇÔ∏è  TABLE PER CONCRETE CLASS (TPCC)");
  console.log("   ‚Ä¢ Tabla independiente por clase concreta");
  console.log("   ‚Ä¢ Todos los campos duplicados");
  console.log("   ‚Ä¢ M√°ximo rendimiento para consultas espec√≠ficas");
  console.log("");
  console.log("=".repeat(80));
}

function showAvailableCommands() {
  console.log("\nüìã COMANDOS DISPONIBLES:");
  console.log("=".repeat(50));
  console.log("");
  console.log("üîß SQL PURO:");
  console.log("   npm run table-per-hierarchy-sql");
  console.log("   npm run table-per-class-sql");
  console.log("   npm run table-per-concrete-sql");
  console.log("   npm run all-sql");
  console.log("");
  console.log("üõ†Ô∏è  TYPEORM:");
  console.log("   npm run table-per-hierarchy-orm");
  console.log("   npm run table-per-class-orm");
  console.log("   npm run table-per-concrete-orm");
  console.log("   npm run all-orm");
  console.log("");
  console.log("üìä COMPARACI√ìN:");
  console.log("   npm run dev  (este comando)");
  console.log("");
}

function showComparisonTable() {
  console.log("üìä COMPARACI√ìN DE ESTRATEGIAS:");
  console.log("=".repeat(80));
  console.log(
    "| Aspecto                  | TPH        | TPC        | TPCC       |"
  );
  console.log(
    "|--------------------------|------------|------------|------------|"
  );
  console.log(
    "| N√∫mero de tablas         | 1          | n+1        | n          |"
  );
  console.log(
    "| Campos NULL              | Muchos     | Ninguno    | Ninguno    |"
  );
  console.log(
    "| JOINs requeridos         | Ninguno    | S√≠         | Ninguno    |"
  );
  console.log(
    "| Consultas polim√≥rficas   | Simples    | UNIONs     | UNIONs++   |"
  );
  console.log(
    "| Consultas espec√≠ficas    | Filtros    | JOINs      | Directas   |"
  );
  console.log(
    "| Integridad referencial   | Limitada   | Completa   | Por tabla  |"
  );
  console.log(
    "| Rendimiento              | Bueno      | Medio      | Excelente* |"
  );
  console.log(
    "| Mantenimiento            | F√°cil      | Medio      | Complejo   |"
  );
  console.log(
    "| Duplicaci√≥n de esquema   | Ninguna    | Poca       | Total      |"
  );
  console.log(
    "| Escalabilidad            | Limitada   | Buena      | Excelente  |"
  );
  console.log("=".repeat(80));
  console.log(
    "* Excelente para consultas espec√≠ficas, complejo para polim√≥rficas"
  );
}

function showUseCases() {
  console.log("\nüéØ CU√ÅNDO USAR CADA ESTRATEGIA:");
  console.log("=".repeat(50));
  console.log("");
  console.log("‚úÖ USE TABLE PER HIERARCHY (TPH) CUANDO:");
  console.log("   ‚Ä¢ La jerarqu√≠a es simple y estable");
  console.log("   ‚Ä¢ Necesita consultas polim√≥rficas frecuentes");
  console.log("   ‚Ä¢ No le importan los campos NULL");
  console.log("   ‚Ä¢ Prioriza simplicidad y rapidez de desarrollo");
  console.log("   ‚Ä¢ La mayor√≠a de campos son compartidos");
  console.log("");
  console.log("‚úÖ USE TABLE PER CLASS (TPC) CUANDO:");
  console.log("   ‚Ä¢ Quiere evitar campos NULL");
  console.log("   ‚Ä¢ Necesita integridad referencial espec√≠fica");
  console.log("   ‚Ä¢ La jerarqu√≠a es moderadamente compleja");
  console.log("   ‚Ä¢ Busca balance entre normalizaci√≥n y rendimiento");
  console.log("   ‚Ä¢ Los tipos tienen campos espec√≠ficos importantes");
  console.log("");
  console.log("‚úÖ USE TABLE PER CONCRETE CLASS (TPCC) CUANDO:");
  console.log("   ‚Ä¢ Prioriza el rendimiento de consultas espec√≠ficas");
  console.log("   ‚Ä¢ Las clases tienen pocos campos en com√∫n");
  console.log("   ‚Ä¢ Raramente necesita consultas polim√≥rficas");
  console.log("   ‚Ä¢ Puede manejar la duplicaci√≥n de esquema");
  console.log("   ‚Ä¢ Cada tipo puede evolucionar independientemente");
}

function showImplementationExamples() {
  console.log("\nüí° EJEMPLOS DE IMPLEMENTACI√ìN:");
  console.log("=".repeat(50));
  console.log("");
  console.log("üìÅ ESTRUCTURA DEL PROYECTO:");
  console.log("   src/");
  console.log("   ‚îú‚îÄ‚îÄ common/                    # Entidades TypeScript base");
  console.log("   ‚îú‚îÄ‚îÄ table-per-hierarchy/       # Estrategia TPH");
  console.log("   ‚îÇ   ‚îú‚îÄ‚îÄ sql/example.ts        # SQL puro");
  console.log("   ‚îÇ   ‚îî‚îÄ‚îÄ orm/                  # TypeORM");
  console.log("   ‚îú‚îÄ‚îÄ table-per-class/          # Estrategia TPC");
  console.log("   ‚îÇ   ‚îú‚îÄ‚îÄ sql/example.ts        # SQL puro");
  console.log("   ‚îÇ   ‚îî‚îÄ‚îÄ orm/                  # TypeORM");
  console.log("   ‚îî‚îÄ‚îÄ table-per-concrete/       # Estrategia TPCC");
  console.log("       ‚îú‚îÄ‚îÄ sql/example.ts        # SQL puro");
  console.log("       ‚îî‚îÄ‚îÄ orm/                  # TypeORM");
  console.log("");
  console.log("üèóÔ∏è CADA EJEMPLO INCLUYE:");
  console.log("   ‚Ä¢ Creaci√≥n de esquema de base de datos");
  console.log("   ‚Ä¢ Inserci√≥n de datos de ejemplo");
  console.log("   ‚Ä¢ Consultas polim√≥rficas y espec√≠ficas");
  console.log("   ‚Ä¢ An√°lisis de rendimiento y estructura");
  console.log("   ‚Ä¢ Ventajas y desventajas de cada estrategia");
}

async function main() {
  showWelcome();

  // Mostrar datos de ejemplo que usamos
  printEmployeeList(sampleEmployees, "DATOS DE EJEMPLO UTILIZADOS");

  showComparisonTable();
  showUseCases();
  showImplementationExamples();
  showAvailableCommands();

  console.log("\nüöÄ ¬°Ejecute los comandos para ver cada estrategia en acci√≥n!");
  console.log("=".repeat(80));
}

if (require.main === module) {
  main().catch(console.error);
}

export { main };
